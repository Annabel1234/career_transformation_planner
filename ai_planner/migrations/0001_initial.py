# Generated by Django 5.2.4 on 2025-07-03 22:04

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('google_id', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(max_length=200)),
                ('picture_url', models.URLField(blank=True, null=True)),
                ('age', models.PositiveIntegerField()),
                ('gender', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('education', models.TextField()),
                ('years_experience', models.PositiveIntegerField()),
                ('income_level', models.CharField(max_length=50)),
                ('last_career_change', models.DateField()),
                ('summary', models.TextField()),
                ('personality_traits', models.JSONField(default=dict)),
                ('motivators', models.JSONField(default=list)),
                ('work_style', models.JSONField(default=dict)),
                ('user_type', models.CharField(max_length=50)),
                ('onboarding_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='CareerPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('goal_id', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('plan_description', models.TextField()),
                ('blockers', models.JSONField(default=list)),
                ('milestones', models.JSONField(default=list)),
                ('weekly_plans', models.JSONField(default=list)),
                ('user_prompt', models.TextField(blank=True)),
                ('ai_model_used', models.CharField(default='gpt-3.5-turbo', max_length=100)),
                ('tokens_used', models.PositiveIntegerField(default=0)),
                ('processing_time', models.FloatField(default=0.0)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('completed', 'Completed'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='career_plans', to='ai_planner.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='AIRequestLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('request_type', models.CharField(choices=[('plan_generation', 'Plan Generation'), ('plan_refinement', 'Plan Refinement'), ('milestone_update', 'Milestone Update')], max_length=50)),
                ('input_data', models.JSONField()),
                ('output_data', models.JSONField()),
                ('ai_model', models.CharField(max_length=100)),
                ('tokens_used', models.PositiveIntegerField()),
                ('processing_time', models.FloatField()),
                ('status', models.CharField(choices=[('success', 'Success'), ('error', 'Error'), ('partial', 'Partial Success')], max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('career_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_requests', to='ai_planner.careerplan')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_requests', to='ai_planner.userprofile')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlanExecution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('milestone_order', models.PositiveIntegerField()),
                ('milestone_title', models.CharField(max_length=200)),
                ('week_number', models.PositiveIntegerField()),
                ('year', models.PositiveIntegerField()),
                ('task_description', models.TextField()),
                ('focus_areas', models.JSONField(default=list)),
                ('time_commitment', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('skipped', 'Skipped')], default='not_started', max_length=20)),
                ('completion_percentage', models.PositiveIntegerField(default=0)),
                ('notes', models.TextField(blank=True)),
                ('planned_start_date', models.DateField()),
                ('planned_end_date', models.DateField()),
                ('actual_start_date', models.DateField(blank=True, null=True)),
                ('actual_completion_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('career_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='ai_planner.careerplan')),
            ],
            options={
                'unique_together': {('career_plan', 'milestone_order', 'week_number', 'year')},
            },
        ),
    ]
